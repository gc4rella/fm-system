APP_NAME="Open Baton FM System"
PID_FILE=~/.openbaton-fms.pid
###################

FIRST_APP_ARG=$(echo $APP_ARGS | awk '{print $1;}' | sed "s/'//g")
START_ARGUMENTS=${@#$FIRST_APP_ARG}

# it returns the process pid in the PID_FILE or -1 if not found
get_pid () {
	local PID
	if [ -e "$PID_FILE" ]; then
		PID=$(cat "$PID_FILE")
	fi

	if [ -n "$PID" ]; then
		echo $PID
	else
		echo -1
	fi
}

# 1 = is running
# 0 = is not running
check_running () {
    local PID
    PID=$(get_pid)

    if [ $PID -eq -1 ]; then
        echo "0"
    elif [ -n "$(ps -p"$PID" -opid=)" ]; then
        echo "1"
    else
        # here the process pid is in PID_FILE but the process is not running
        echo "0"
    fi
}

check_already_running () {
    IS_RUNNING="$(check_running)"

    if [ $IS_RUNNING -eq 1 ]; then
    	echo "$APP_NAME is already running"
  	    exit 1
    fi
}

configure () {
    check_already_running
}

start () {
    configure
    echo "Starting $APP_NAME"

    nohup $JAVACMD $START_ARGUMENTS > /dev/null 2>&1 &
    echo $! > $PID_FILE

    APP_PID="-1"
	COUNTER=60
	IS_RUNNING=0
	while [ $IS_RUNNING -eq 0 -a $COUNTER -gt 0 ]; do
		IS_RUNNING=$(check_running)
		printf "."
		APP_PID="$(get_pid)"
	    COUNTER=$(($COUNTER-1))
	    sleep 1
	done

	if [ $COUNTER -eq 0 ]; then
		echo "Failed to start $APP_NAME"
		exit 1
	fi
	echo "$APP_NAME started"
}

stop (){
    IS_RUNNING=$(check_running)

	if [ $IS_RUNNING -eq 0 ]; then
		echo "$APP_NAME not running"
		return 1
	else
	    echo "Stopping $APP_NAME"
		APP_PID="$(get_pid)"
		kill $APP_PID
		COUNTER=10

		while [ $IS_RUNNING -eq 1 -a $COUNTER -gt 0 ]; do
			IS_RUNNING=$(check_running)
			printf "."

			COUNTER=$(($COUNTER-1))
			sleep 1
		done

		if [ $COUNTER -eq 0 ]; then
			echo "Failed to stop process $APP_PID, try 'force-stop'."
			exit 1
		fi
        rm "$PIDFILE" 2> /dev/null
		echo "$APP_NAME stopped"

	fi
}

force_stop () {
	IS_RUNNING="$(check_running)"

	if [ $IS_RUNNING -eq 0 ]; then
		echo "$APP_NAME not running"
	else
	    APP_PID="$(get_pid)"
		kill -9 "$APP_PID"

		sleep 1

		IS_RUNNING="$(check_running)"

		if [ $IS_RUNNING -eq 1 ]; then
			echo "Failed to kill -9 $APP_PID"
		else
			rm "$PIDFILE" 2> /dev/null
			echo "Killed $APP_NAME (pid $APP_PID)."
		fi
	fi
}


status () {
    IS_RUNNING="$(check_running)"

    if [ $IS_RUNNING -eq 0 ]; then
   		echo "$APP_NAME is not running"
   	else
   		echo "$APP_NAME is running"
   	fi
}

usage () {
    echo $APP_NAME
    echo "Usage: openbaton-fms [status|start|stop|force-stop|restart]"
}

##
#   MAIN
##

if [ $(echo "$APP_ARGS" | wc -w) -eq 0 ]
then
        usage
        exit 1
fi

case ${FIRST_APP_ARG} in
    "start" )
        start ;;
    "stop" )
        stop ;;
    "restart" )
        stop
        start;;
    "status" )
        status ;;
    "force-stop" )
        force_stop ;;
     *)
        usage;;
esac
