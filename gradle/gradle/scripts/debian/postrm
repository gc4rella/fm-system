#!/bin/sh

##########################
#### General Settings ####
##########################

set -e
set -u
#set -x # only for DEBUG

# Make available the functions defined in /lib/lsb/init-functions
. /lib/lsb/init-functions


##########################
#### Global Variables ####
##########################

USER="$(id -un 2>/dev/null || true)"

OPENBATON_BASE=/usr
OPENBATON_PLUGINS_FOLDER=${OPENBATON_BASE}/lib/openbaton/plugins
OPENBATON_LOGS_FOLDER=/var/log/openbaton


##############################
#### Execution privileges ####
##############################

checkBinary () {
    if command -v $1 >/dev/null 2>&1 ; then
        log_success_msg "Checking for '$1'"
        return 0
    else
        log_failure_msg "Checking for '$1'"
        return 1
    fi
}

_ex='sh -c'
if [ "${USER}" != 'root' ]; then
    if checkBinary sudo; then
        _ex='sudo -E sh -c'
    elif checkBinary su; then
        _ex='su -c'
    fi
fi


#############################
#### VIM-Drivers Plugins ####
#############################

cleanPlugins () {
    export OPENBATON_PLUGINS_FOLDER="${OPENBATON_PLUGINS_FOLDER}"
    if [ -d ${OPENBATON_PLUGINS_FOLDER} ]; then
    	$_ex 'rm -r ${OPENBATON_PLUGINS_FOLDER}'
        log_success_msg "Cleaning the environment: deleted plugins"
    fi
}


##############
#### Logs ####
##############

cleanLogs () {
    export OPENBATON_LOGS_FOLDER="${OPENBATON_LOGS_FOLDER}"
    if [ -d ${OPENBATON_LOGS_FOLDER} ]; then
    	$_ex 'rm -r ${OPENBATON_LOGS_FOLDER}'
        log_success_msg "Cleaning the environment: deleted logs"
    fi
}


############################################
#### Clean Open Baton NFVO installation ####
############################################

clean () {
    cleanPlugins
    cleanLogs
}


case "${1}" in
  purge)
    clean
  ;;

  remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
  ;;

  *)
    log_failure_msg "postrm called with unknown argument ${1}"
    exit 1
  ;;

esac

exit 0

