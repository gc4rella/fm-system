import org.openbaton.catalogue.mano.common.monitoring.*
import org.openbaton.faultmanagement.fc.repositories.VRAlarmRepository
import org.openbaton.faultmanagement.fc.repositories.VNFAlarmRepository
import org.openbaton.catalogue.mano.record.VNFCInstance
import org.openbaton.faultmanagement.fc.policymanagement.interfaces.PolicyManager
import org.openbaton.faultmanagement.fc.policymanagement.interfaces.MonitoringManager
import org.openbaton.faultmanagement.fc.interfaces.NFVORequestor
import org.openbaton.catalogue.mano.record.VirtualNetworkFunctionRecord
import org.openbaton.catalogue.mano.common.faultmanagement.VirtualizedResourceAlarmStateChangedNotification
import org.openbaton.catalogue.mano.common.faultmanagement.VNFAlarmStateChangedNotification
import org.openbaton.faultmanagement.fc.RecoveryAction
import java.util.Date
import java.text.SimpleDateFormat
import java.text.DateFormat
import org.openbaton.catalogue.mano.descriptor.VirtualDeploymentUnit;
import org.openbaton.faultmanagement.ha.HighAvailabilityManager
import java.util.List
import java.util.Iterator

global MonitoringManager monitoringManager
global PolicyManager policyManager
global org.slf4j.Logger logger
global NFVORequestor nfvoRequestor
global HighAvailabilityManager highAvailabilityManager
global VRAlarmRepository vrAlarmRepository
global VNFAlarmRepository vnfAlarmRepository

rule "Get a managed VR alarm and create a VNF alarm"
    salience 10
    when
        a : VRAlarm( thresholdId : thresholdId, hostname : managedObject, alarmState == AlarmState.FIRED,perceivedSeverity:perceivedSeverity,
        alarmRaisedTime:alarmRaisedTime,eventTime:eventTime,faultType:faultType)

        vnfcInstance : VNFCInstance() from nfvoRequestor.getVNFCInstance(hostname)

        eval( policyManager.isAVNFAlarm(thresholdId) == true)
    then
        logger.debug("\tReceived a VR alarm to convert into VNF alarm regarding the managedObject: " + hostname);
        logger.debug("\tthe vnfcinstance is " + vnfcInstance);

        //Create a VNFAlarm from the VRAlarm received
        VNFAlarm vnfAlarm = new VNFAlarm();
        vnfAlarm.setAlarmState(AlarmState.FIRED);
        vnfAlarm.setThresholdId(thresholdId);
        vnfAlarm.setAlarmRaisedTime(alarmRaisedTime);
        vnfAlarm.setEventTime(eventTime);
        vnfAlarm.setFaultType(faultType);
        vnfAlarm.setPerceivedSeverity(perceivedSeverity);
        vnfAlarm.addVnfcId(vnfcInstance.getId());
        VirtualNetworkFunctionRecord vnfr = nfvoRequestor.getVirtualNetworkFunctionRecordFromVNFCHostname(vnfcInstance.getHostname());

        VirtualDeploymentUnit vdu = nfvoRequestor.getVDU(vnfr,vnfcInstance.getId());

        vnfAlarm.setVimName(vdu.getVimInstanceName().iterator().next());
        vnfAlarm.setVnfrId(vnfr.getId());

        delete(a);
        insert(vnfAlarm);
        logger.debug("VNF alarm!");
end

rule "Ignore VR alarms of failed VNFC Instances"
    salience 20
    when
        a : VRAlarm(managedObject : managedObject, alarmState == AlarmState.FIRED)
        vnfcInstance : VNFCInstance(state == "failed") from nfvoRequestor.getVNFCInstance(managedObject)
    then
        logger.debug("Ignored an alarm from a failed instance: "+managedObject);
        delete(a);
end

rule "Ignore VR alarms of null VNFC Instances and delete alarms in database"
    salience 25
    when
        a : VRAlarm(managedObject : managedObject, alarmState == AlarmState.FIRED)
        not VNFCInstance() from nfvoRequestor.getVNFCInstance(managedObject)
    then
        logger.debug("Ignored an alarm from a null instance: "+managedObject);
        //vrAlarmRepository.removeByManagedObject(managedObject);
        delete(a);
end

rule "Ignore  VirtualizedResourceAlarmStateChangedNotification of failed or null VNFCInstances"
    salience 24
    when
        notification : VirtualizedResourceAlarmStateChangedNotification( thresholdId : triggerId, alarmState : alarmState)
        vrAlarmUpdated : VRAlarm( hostname : managedObject ) from vrAlarmRepository.findFirstByThresholdId(thresholdId)
        not VNFCInstance() from nfvoRequestor.getVNFCInstance(hostname)
    then
        logger.debug("Ignored a VRalarm state changed from a null instance: "+hostname);
        //vrAlarmRepository.removeByManagedObject(hostname);
        delete(notification);
end

rule "Create a VNFAlarmStateChangedNotification"
    salience 12
    when
        notification : VirtualizedResourceAlarmStateChangedNotification( currentThresholdId : triggerId, alarmState : alarmState)
        eval( policyManager.isAVNFAlarm(currentThresholdId) == true)
    then
        String policyId=policyManager.getPolicyIdByThresholdId(currentThresholdId);
        String vnfrId = policyManager.getVnfrIdByPolicyId(policyId);
        VNFAlarmStateChangedNotification vnfAlarmStateChangedNotification = new VNFAlarmStateChangedNotification(vnfrId,policyId,alarmState,currentThresholdId);
        delete(notification);
        insert(vnfAlarmStateChangedNotification);
end